{"version":3,"sources":["src/lib/getDateType.js","src/lib/index.js","src/myTool.js","index.js"],"names":["getDateType","date","Object","prototype","toString","call","slice","myTool","array","hasObject","Array","isArray","Set","obj","newArray","forEach","item","s","JSON","stringify","push","index","defaultValue","type","split","ans","Number","isNaN","oldSource","newSource","parse","Date","getTime","attrs","global","ignoreCase","multiline","RegExp","lastIndex","some","concat","arr","name","console","log","flat"],"mappings":"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","file":"myTools.e31bb0bc.js","sourceRoot":"..","sourcesContent":["/**\r\n * 判断类型的函数\r\n * @param {需要判断类型的变量 any} date\r\n * @returns {类型 String} \r\n */\r\n\r\nfunction getDateType(date) {\r\n    return Object.prototype.toString.call(date).slice(8, -1)\r\n}\r\n\r\nexport default getDateType","import getDateType from './getDateType'\r\n\r\nexport {\r\n    getDateType\r\n}","import { \r\n    getDateType \r\n} from './lib/index'\r\nclass myTool {\r\n    /**\r\n     * 数组去重方法\r\n     * @param {需要去重的数组 Array} array \r\n     * @param {是否含有引用类型,默认含有true Boolean} hasObject\r\n     * @returns {去重后新的数组 Array}\r\n     */\r\n    static removeRepeat(array, hasObject=true) {\r\n        //如果不是一个数组,返回undefined\r\n        if(!Array.isArray(array)) return void 0\r\n        //如果只包含基本类型\r\n        if(!hasObject) {\r\n            return [...new Set(array)]\r\n        } else {\r\n            let obj = {}\r\n            let newArray = []  //返回的新数组\r\n            array.forEach(item => {\r\n                let s = JSON.stringify(item)\r\n                //如果不在对象中，则插入新数组\r\n                if(!(s in obj)) {\r\n                    newArray.push(item)\r\n                    obj[s] = true\r\n                }\r\n            })\r\n            return newArray\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 用于对象的取值\r\n     * @param {需要索引的对象 Object} obj\r\n     * @param {取值的内容 String} index\r\n     * @param {如果是undefined,或者没找到,则返回的值,默认undefined any} defaultValue\r\n     * @returns {如果值存在,返回取到的值,否则返回默认值 any}\r\n     */\r\n    static objectIndex(obj, index, defaultValue = void 0) {\r\n        let type = getDateType(obj)\r\n        //如果不是对象或者字符串,直接返回\r\n        if(\r\n            (type !== 'Object')\r\n            ||\r\n            (typeof index !== 'string')\r\n        ) {\r\n            return defaultValue\r\n        } else {\r\n            index = index.split('.')\r\n            let ans = obj\r\n            for(let item of index) {\r\n                //判断是不是对象\r\n                if(type === 'Object') {\r\n                    //如果值存在就继续往下读取,并对除了undefined的几个为false的情况进行兼容\r\n                    if(\r\n                        (ans[item])\r\n                        ||\r\n                        (Number.isNaN(ans[item]))\r\n                        ||\r\n                        (ans[item] === '')\r\n                        ||\r\n                        (ans[item] === 0)\r\n                        ||\r\n                        (ans[item] === false)\r\n                        ||\r\n                        (ans[item] === 0.0)\r\n                        ||\r\n                        (ans[item] === null)\r\n                    ) {\r\n                        ans = ans[item]\r\n                    } else {\r\n                        return defaultValue\r\n                    }\r\n                } else {\r\n                    return defaultValue\r\n                }\r\n            }\r\n            return ans\r\n        } \r\n    }\r\n\r\n    /**\r\n     * 变量深拷贝的方法\r\n     * @param {需要克隆的变量 any} oldSource\r\n     * @returns {拷贝后的变量 any} \r\n     */\r\n    static clone(oldSource) {\r\n        let newSource\r\n        //对变量进行类型判断\r\n        //如果为null undefined string number boolean,直接返回\r\n        if(\r\n            (typeof oldSource === null)\r\n            ||\r\n            (typeof oldSource !== 'object')\r\n        ) {\r\n            newSource = oldSource\r\n            return newSource\r\n        } else {\r\n            let type = getDateType(oldSource)\r\n            //如果为对象\r\n            if(type === 'Object') {\r\n                newSource = JSON.parse(JSON.stringify(oldSource))\r\n                return newSource\r\n            } else if(type === 'Array') {\r\n                //如果为数组\r\n                newSource = [...oldSource]\r\n                return newSource\r\n            } else if(type === 'Function') {\r\n                newSource = oldSource\r\n                return newSource\r\n            } else if(type === 'Date') {\r\n                newSource = new Date(oldSource.getTime())\r\n                return newSource\r\n            } else {\r\n                //如果为正则表达式\r\n                let attrs = ''\r\n                if (oldSource.global) attrs += 'g'\r\n                if (oldSource.ignoreCase) attrs += 'i'\r\n                if (oldSource.multiline) attrs += 'm'\r\n                let newSource = new RegExp(oldSource, attrs)\r\n                newSource.lastIndex = oldSource.lastIndex\r\n                return newSource\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 数组的扁平化\r\n     * @param {需要扁平化的数组 Array} array \r\n     * @returns {扁平化之后的数组 Array}\r\n     */\r\n    static flat(array) {\r\n        let type = getDateType(array)\r\n        //如果不是数组返回undefined\r\n        if(type !== 'Array') return void 0\r\n        else {\r\n            //如果内部存在数组,就展开一次\r\n            while(array.some(item => Array.isArray(item))){\r\n                array = [].concat(...array);\r\n            }\r\n            return array;\r\n        }\r\n    }\r\n}\r\n\r\nexport default myTool","import myTool from './src/myTool'\r\n\r\nlet arr = [1,2,3,[1,2,3,[1,2,3]], {name: 'aa'}]\r\n\r\nconsole.log(myTool.flat(arr))\r\nconsole.log(arr)"]}