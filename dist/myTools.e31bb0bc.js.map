{"version":3,"sources":["src/LinkList.js","index.js"],"names":["Node","val","next","LinkList","root","size","head","ans","JSON","stringify","i","push","node","index","length","undefined","get","isEmpty","delNode","linkList","append","console","log","unshift"],"mappings":"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","file":"myTools.e31bb0bc.js","sourceRoot":"..","sourcesContent":["\r\nclass Node {\r\n    constructor(val) {\r\n        this.val = val\r\n        this.next = null\r\n    }\r\n}\r\n\r\n\r\nclass LinkList {\r\n    constructor() {\r\n        this.root = null\r\n        this.size = 0\r\n    }\r\n    //插入节点\r\n    append(val) {\r\n        //如果根节点不存在\r\n        if(this.root === null) {\r\n            this.root = new Node(val)\r\n        } else {\r\n            let head = this.root\r\n            while(head.next) {\r\n                head = head.next\r\n            }\r\n            head.next = new Node(val)\r\n        }\r\n        this.size++\r\n    }\r\n    //查询节点,不存在返回undefined\r\n    find(val) {\r\n        let ans = []\r\n        let head = this.root\r\n        val = JSON.stringify(val)\r\n        let i = 0\r\n        while(head) {\r\n            if(JSON.stringify(head.val) === val) {\r\n                ans.push({\r\n                    node: head,\r\n                    index: i\r\n                })\r\n            }\r\n            i++\r\n            head = head.next\r\n        }\r\n        return ans.length === 0 ? undefined : ans.length === 1? ans[0]:ans\r\n    }\r\n    //删除节点 传入索引,成功返回删除节点的值 失败返回false\r\n    delNode(index) {\r\n        if(index > this.size - 1 || index < 0) {\r\n            return false\r\n        } else {\r\n            let val = this.get(index)\r\n            //如果删除是头节点\r\n            if(index === 0) {\r\n                this.root = this.root.next\r\n            } else if(index === this.size - 1) {\r\n                //如果删除的是尾节点\r\n                let head = this.root\r\n                while(head.next.next) {\r\n                    head = head.next\r\n                }\r\n                head.next = null\r\n            } else {\r\n                let head = this.root\r\n                while(index > 1) {\r\n                    head = head.next\r\n                    index--\r\n                }\r\n                head.next = head.next.next\r\n            }\r\n            this.size--\r\n            return val\r\n        }\r\n    }\r\n    //查询索引\r\n    indexOf(val) {\r\n        let i = 0\r\n        val = JSON.stringify(val)\r\n        let head = this.root\r\n        while(head) {\r\n            if(JSON.stringify(head.val) === val) {\r\n                return i\r\n            }\r\n            i++\r\n            head = head.next\r\n        }\r\n        return -1\r\n    }\r\n    //获取节点的val\r\n    get(index) {\r\n        if(index < 0 || index > this.size - 1) {\r\n            return null\r\n        } else {\r\n            let head = this.root\r\n            while(index > 0) {\r\n                head = head.next\r\n                index--\r\n            }\r\n            return head.val\r\n        }\r\n    }\r\n    //修改链表的元素,成功返回true，失败返回false\r\n    upDate(index,val) {\r\n        if(index > this.size - 1 || index < 0) {\r\n            return false\r\n        } else {\r\n            let head = this.root\r\n            while(index > 0) {\r\n                head = head.next\r\n                index--\r\n            }\r\n            head.val = val\r\n            return true\r\n        }\r\n    }\r\n    //返回链表的长度\r\n    size() {\r\n        return this.size\r\n    }\r\n    isEmpty() {\r\n        return this.size === 0\r\n    }\r\n    //移除链表的尾部并返回元素\r\n    pop() {\r\n        if(this.isEmpty()) return false\r\n        return this.delNode(this.size - 1)\r\n    }\r\n    //栈顶插入元素\r\n    unshift(val) {\r\n        let node = new Node(val)\r\n        let head = this.root\r\n        this.root = node\r\n        this.root.next = head\r\n        this.size++\r\n    }\r\n    //获取栈顶元素\r\n    shift() {\r\n        return this.isEmpty() ? null : this.root.val\r\n    }\r\n}\r\n\r\nexport default LinkList","import LinkList from './src/LinkList'\r\n\r\nlet linkList = new LinkList()\r\n\r\nlinkList.append(5)\r\nlinkList.append(5)\r\nlinkList.append(6)\r\nlinkList.append(7)\r\nlinkList.append(8)\r\nlinkList.append(9)\r\nlinkList.append(10)\r\nconsole.log(linkList.unshift(10))\r\nconsole.log(linkList)"]}